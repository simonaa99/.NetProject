// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(TakmicenjeContext))]
    [Migration("20220916083925_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Fakultet", b =>
                {
                    b.Property<int>("FakultetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivFakulteta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FakultetId");

                    b.ToTable("Fakultet");
                });

            modelBuilder.Entity("Domain.Mesto", b =>
                {
                    b.Property<int>("MestoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivMesta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MestoId");

                    b.ToTable("Mesto");
                });

            modelBuilder.Entity("Domain.Osoba", b =>
                {
                    b.Property<int>("OsobaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OsobaId");

                    b.ToTable("Osoba");
                });

            modelBuilder.Entity("Domain.Takmicenje", b =>
                {
                    b.Property<int>("TakmicenjeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumOdrzavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tema")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TakmicenjeId");

                    b.ToTable("Takmicenje");
                });

            modelBuilder.Entity("Domain.Tim", b =>
                {
                    b.Property<int>("TimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FakultetId")
                        .HasColumnType("int");

                    b.Property<string>("NazivTima")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimId");

                    b.HasIndex("FakultetId");

                    b.ToTable("Tim");
                });

            modelBuilder.Entity("Domain.Ucesce", b =>
                {
                    b.Property<int>("TimId")
                        .HasColumnType("int");

                    b.Property<int>("TakmicenjeId")
                        .HasColumnType("int");

                    b.HasKey("TimId", "TakmicenjeId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Ucesce");
                });

            modelBuilder.Entity("Domain.Administrator", b =>
                {
                    b.HasBaseType("Domain.Osoba");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("Domain.Ucesnik", b =>
                {
                    b.HasBaseType("Domain.Osoba");

                    b.Property<int>("GodinaStudija")
                        .HasColumnType("int");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kontakt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MestoId")
                        .HasColumnType("int");

                    b.Property<int>("TimId")
                        .HasColumnType("int");

                    b.HasIndex("MestoId");

                    b.HasIndex("TimId");

                    b.ToTable("Ucesnik");
                });

            modelBuilder.Entity("Domain.Tim", b =>
                {
                    b.HasOne("Domain.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fakultet");
                });

            modelBuilder.Entity("Domain.Ucesce", b =>
                {
                    b.HasOne("Domain.Takmicenje", "Takmicenje")
                        .WithMany("Ucesca")
                        .HasForeignKey("TakmicenjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Tim", "Tim")
                        .WithMany("Ucesca")
                        .HasForeignKey("TimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Takmicenje");

                    b.Navigation("Tim");
                });

            modelBuilder.Entity("Domain.Administrator", b =>
                {
                    b.HasOne("Domain.Osoba", null)
                        .WithOne()
                        .HasForeignKey("Domain.Administrator", "OsobaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Ucesnik", b =>
                {
                    b.HasOne("Domain.Mesto", "Mesto")
                        .WithMany()
                        .HasForeignKey("MestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Osoba", null)
                        .WithOne()
                        .HasForeignKey("Domain.Ucesnik", "OsobaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Tim", "Tim")
                        .WithMany()
                        .HasForeignKey("TimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mesto");

                    b.Navigation("Tim");
                });

            modelBuilder.Entity("Domain.Takmicenje", b =>
                {
                    b.Navigation("Ucesca");
                });

            modelBuilder.Entity("Domain.Tim", b =>
                {
                    b.Navigation("Ucesca");
                });
#pragma warning restore 612, 618
        }
    }
}
